generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  avatar       String?
  password     String
  guide        Guide?
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reportGuides ReportGuide[]
  chatRooms    ChatRoom[]
  messages     Message[]
}

model Guide {
  id                Int           @id @default(autoincrement())
  fullname          String
  birthdate         String
  height            String
  address           String
  phone             String
  resumePhoto       String
  guidePhotos       File[]
  selfIntro         String
  language          String? //추 후 postresql 변경 후, Json으로 교체
  personality       String?
  guideIntro        String?
  pickupPlaceMain   String?
  pickupPlaceLat    Float?
  pickupPlaceLng    Float?
  pickupPlaceDetail String?
  isActive          Boolean       @default(true) //가이드용
  isApproved        Boolean       @default(false) //운영자용
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            Int           @unique
  reservations      Reservation[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  reportGuides      ReportGuide[]
}

model Reservation {
  id           Int      @unique
  guide        Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  guideId      Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int
  startTime    DateTime
  endTime      DateTime
  serviceFee   Int
  guideConfirm Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt()
}

model File {
  id           Int      @id @default(autoincrement())
  fileUrl      String
  fileUrlOrder Int
  guide        Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  guideId      Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ReportGuide {
  id        Int      @id @default(autoincrement())
  fromUser  User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?
  toGuide   Guide    @relation(fields: [guideId], references: [id], onDelete: Cascade)
  guideId   Int
  reason    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChatRoom {
  id          String    @id @default(cuid())
  users       User[]
  guideUserId Int
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
}

model Message {
  id         Int      @id @default(autoincrement())
  payload    String
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
}
